;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void DAC_CH_Write(unsigned int, unsigned int);
;void DAC_setting(unsigned int);
;void Initial_Motor_Setting(void);
;void Init_USART(void);
;void Stop_Setting(void);
;void Motor_dir(int c);
;void Linetracer(void);
;void Emergency_Act(void);
;void Serial_Send0(unsigned char);
;void SerialData0(char *str);
;unsigned char Serial_Rece1(void);
;void Ult_Sonic(void);

	.DSEG
;void DAC_CH_Write(unsigned int ch1, unsigned int da)
; 0000 0044 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0045 unsigned int data = ((ch1 << 12) & 0x7000) | ((da << 4) & 0x0ff0);
; 0000 0046 DAC_setting(data);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	ch1 -> R18,R19
;	da -> Y+4
;	data -> R16,R17
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0047 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;void DAC_setting(unsigned int data)
; 0000 004A {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004B unsigned char S_DIN = clear; // PL7 초기화
; 0000 004C int i = 0;
; 0000 004D 
; 0000 004E PORTL = PORTL | 0x40; // S_CLK = 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;	data -> R20,R21
;	S_DIN -> R17
;	i -> R18,R19
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004F delay_us(1);
;PCODE: $0000002E VOL: 0
; 0000 0050 
; 0000 0051 PORTL = PORTL & 0xbf; // S_CLK = 1   falling_edge
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0052 delay_us(1);
;PCODE: $00000032 VOL: 0
; 0000 0053 
; 0000 0054 PORTL = PORTL & 0xdf; // sycn' = 1
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0055 delay_us(1);
;PCODE: $00000036 VOL: 0
; 0000 0056 
; 0000 0057 for (i = 16; i > 0; i--)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0058 {
; 0000 0059 S_DIN = (data >> (i - 1)) & 0x01; // MSB에서 LSB로 이동시며 데이터를 S_DIN에 저장하여 확인한다.
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005A 
; 0000 005B if (S_DIN == 1)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005C PORTL = PORTL | 0x80;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005D else if (S_DIN == 0)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005E PORTL = PORTL & 0x7f;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005F 
; 0000 0060 PORTL = PORTL | 0x40; // S_CLK = 1
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0061 delay_us(1);
;PCODE: $00000057 VOL: 0
; 0000 0062 
; 0000 0063 PORTL = PORTL & 0xbf; // S_CLK = 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0064 delay_us(1);
;PCODE: $0000005B VOL: 0
; 0000 0065 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0066 PORTL = PORTL | 0x20; // sync' = 1
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0067 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;void Initial_Motor_Setting(void)
; 0000 006A {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006B 
; 0000 006C int i = 0;
; 0000 006D 
; 0000 006E DDRA = DDRA | 0x1f; // 적외선 발광다이오드 구동 및  모터드라이버
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;	i -> R16,R17
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006F DDRC = 0x00;        // Digtial Input
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0070 DDRL = 0xe0;        // serial
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0071 
; 0000 0072 PORTL = PORTL & 0xbf; // s_clk = 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0073 PORTL = PORTL | 0x20; // sycn' = 1
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0074 
; 0000 0075 PORTA = PORTA | 0x10; // 적외선 발광다이오드 ON
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0076 DDRG = DDRG | 0x20;   // 왼쪽모터 Enable단자 출력으로 초기화
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0077 DDRE = DDRE | 0x08;   // PE3 PWM신호로 설정
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0078 
; 0000 0079 PORTG = clear;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007A PORTE = clear;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007B 
; 0000 007C TCCR0A = 0x21; // PWM Phase correct mode로 사용, compare match모드
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 007D TCCR0B = 0x05; // 업카운트시 TCNTO와 OCR0가 일치하면 OCR0 clear 하향카운트시에 일치하면 SET
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E TCNT0 = clear;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F 
; 0000 0080 RIGHT = clear; // 왼쪽바퀴 pwm시간 입력
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0081 
; 0000 0082 TCCR3A = 0x81; // 8비트 모드의 phase corrct pwm 모드로 동작
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0083 TCCR3B = 0x05; // compare match 상향카운터 OC3A를 클리어 하향카운터에서 set
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0084 
; 0000 0085 TCNT3L = clear;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0086 TCNT3H = clear;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0087 
; 0000 0088 OCR3AH = clear; // 오른쪽바퀴 High bit clear
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0089 LEFT = clear;   // 오른쪽바퀴 Low bit clear
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 008A 
; 0000 008B DAC_setting(0x9000);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008C 
; 0000 008D for (i = 0; i < 8; i++)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008E {
; 0000 008F DAC_CH_Write(i, Compare_Value[i]);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0090 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0091 
; 0000 0092 delay_ms(20);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0093 }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;void Motor_dir(int c)
; 0000 0096 {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0097 
; 0000 0098 switch (c)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;	c -> R16,R17
;PCODE: $000000BC VOL: 0
; 0000 0099 { // F = Forward , L = Left, R = Right
; 0000 009A case F:
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 009B LEFT_MD_A = 1;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009C LEFT_MD_B = 0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009D L_MOTOR_EN = 1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 009E RIGHT_MD_A = 0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009F RIGHT_MD_B = 1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A0 R_MOTOR_EN = 1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00A1 break;
;PCODE: $000000CC VOL: 0
; 0000 00A2 case L:
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A3 LEFT_MD_A = 0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A4 LEFT_MD_B = 1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A5 L_MOTOR_EN = 1;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A6 RIGHT_MD_A = 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A7 RIGHT_MD_B = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00A8 R_MOTOR_EN = 1;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00A9 break;
;PCODE: $000000DD VOL: 0
; 0000 00AA case R:
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AB LEFT_MD_A = 1;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00AC LEFT_MD_B = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00AD L_MOTOR_EN = 1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00AE RIGHT_MD_A = 1;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00AF RIGHT_MD_B = 0;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B0 R_MOTOR_EN = 1;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B1 break;
;PCODE: $000000EE VOL: 0
; 0000 00B2 case S:
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B3 LEFT_MD_A = 0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B4 LEFT_MD_B = 0;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00B5 L_MOTOR_EN = 1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B6 RIGHT_MD_A = 0;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00B7 RIGHT_MD_B = 0;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00B8 R_MOTOR_EN = 1;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B9 break;
;PCODE: $000000FF VOL: 0
; 0000 00BA case T:
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00BB LEFT_MD_A = 1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BC LEFT_MD_B = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00BD L_MOTOR_EN = 1;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00BE RIGHT_MD_A = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00BF RIGHT_MD_B = 0;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00C0 R_MOTOR_EN = 1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00C1 break;
;PCODE: $00000110 VOL: 0
; 0000 00C2 }
;PCODE: $00000111 VOL: 0
; 0000 00C3 }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;void Linetracer(void)
; 0000 00C6 {
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00C7 
; 0000 00C8 int i, data = 0;
; 0000 00C9 unsigned char IR = 0;
; 0000 00CA 
; 0000 00CB IR = PINC;
;PCODE: $00000117 VOL: 0
;	i -> R16,R17
;	data -> R18,R19
;	IR -> R21
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00CC 
; 0000 00CD delay_ms(5);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00CE 
; 0000 00CF for (i = 0; i < 20; i++)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00D0 {
; 0000 00D1 if (IR == Infrared_Sensor[i])
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00D2 {
; 0000 00D3 data = i;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00D4 break;
;PCODE: $00000135 VOL: 0
; 0000 00D5 }
; 0000 00D6 }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D7 
; 0000 00D8 Motor_dir(S);   //역기전력 방지
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D9 
; 0000 00DA if (data < 7)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00DB {
; 0000 00DC Motor_dir(F);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00DD RIGHT = Velocity_Forward;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00DE LEFT = Velocity_Forward;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00DF }
; 0000 00E0 else if (data < 11)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00E1 {
; 0000 00E2 Motor_dir(L);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00E3 RIGHT = Velocity_Low;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00E4 LEFT = Velocity_Low;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E5 }
; 0000 00E6 else if (data < 13)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00E7 {
; 0000 00E8 Motor_dir(L);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00E9 RIGHT = Velocity_High;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00EA LEFT = Velocity_High;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00EB }
; 0000 00EC else if (data < 17)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00ED {
; 0000 00EE Motor_dir(R);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00EF RIGHT = Velocity_Low;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00F0 LEFT = Velocity_Low;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00F1 }
; 0000 00F2 else if (data < 19)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00F3 {
; 0000 00F4 Motor_dir(R);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00F5 RIGHT = Velocity_High;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00F6 LEFT = Velocity_High;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F7 }
; 0000 00F8 else if (data == 19)
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00F9 {
; 0000 00FA Stop_Setting();
;PCODE: $0000017E VOL: 0
; 0000 00FB PORTH = PORTH | 0x40;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00FC PORTL = PORTL | 0x10;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00FD PORTB = PORTB | 0x10;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00FE control = THE_END;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00FF }
; 0000 0100 }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;void Init_USART(void)
; 0000 0102 { // Init_USART
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0103 
; 0000 0104 // 시리얼 포트 0는 블루투스와의 통신 포트이다
; 0000 0105 DDRE = 0xfe;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0106 UCSR0A = 0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0107 UCSR0B = 0x18; // TXE, RXE Enable
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0108 UCSR0C = 0x06; // 비동기, Non Parity, 1 Stop Bit
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0109 UBRR0H = 0x00;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 010A UBRR0L = 0x08; // 115200bps
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 010B 
; 0000 010C // 시리얼 포트 1은 초음파 센서 모듈과의 통신 포트이다
; 0000 010D DDRD = 0x08;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 010E UCSR1A = 0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 010F UCSR1B = 0x18; // TXE, RXE Enable
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0110 UCSR1C = 0x06; // 비동기, Non Parity, 1 Stop Bit
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0111 UBRR1H = 0x00;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0112 UBRR1L = 0x08; // 115200 bps
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0113 DDRB = 0xff;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0114 }
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;void Serial_Send0(unsigned char t)
; 0000 0118 {
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0119 // 전송 준비가 될 때 까지 대기
; 0000 011A while (1)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;	t -> R17
;PCODE: $000001B5 VOL: 0
; 0000 011B {
; 0000 011C if ((UCSR0A & 0x20) != 0)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 011D break;
;PCODE: $000001B9 VOL: 0
; 0000 011E }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 011F 
; 0000 0120 UDR0 = t;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0121 UCSR0A = UCSR0A | 0x20;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0122 }
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;void SerialData0(char *str)
; 0000 0126 {
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0127 while (*str)
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;	*str -> R16,R17
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0128 Serial_Send0(*str++);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0129 }
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;void Serial_Send1(unsigned char t)
; 0000 012C {
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 012D // 전송준비가 될 때 까지 대기
; 0000 012E while (1)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;	t -> R17
;PCODE: $000001DD VOL: 0
; 0000 012F {
; 0000 0130 if ((UCSR1A & 0x20) != 0)
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0131 break;
;PCODE: $000001E1 VOL: 0
; 0000 0132 }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0133 UDR1 = t;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0134 UCSR1A = UCSR1A | 0x20;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0135 }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;unsigned char Serial_Rece1(void)
; 0000 0138 {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0139 unsigned char data;
; 0000 013A while (1)
;PCODE: $000001EF VOL: 0
;	data -> R17
;PCODE: $000001F0 VOL: 0
; 0000 013B {
; 0000 013C if ((UCSR1A & 0x80) != 0)
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 013D break;
;PCODE: $000001F4 VOL: 0
; 0000 013E }
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 013F data = UDR1;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0140 UCSR1A |= 0x80;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0141 return data;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0142 }
;PCODE: $00000200 VOL: 0
;interrupt[21] void timer1_ovf_isr(void)
; 0000 0145 {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0146 int i;
; 0000 0147 
; 0000 0148 TCNT1H = 0xE1;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;	i -> R16,R17
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0149 TCNT1L = 0x7C;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 014A 
; 0000 014B for (i = 0; i < 17; i++)
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 014C {
; 0000 014D buf[i] = Serial_Rece1();
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 014E }
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 014F 
; 0000 0150 
; 0000 0151 }
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;void Set_Interrupt(void)
; 0000 0156 {
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0157 TIMSK1 = 0x01;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0158 
; 0000 0159 TCCR1A = 0;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 015A TCCR1B = 0x05;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 015B 
; 0000 015C TCNT1H = 0xE1; // 0.1s 마다 반복
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 015D TCNT1L = 0x7C; // 0xffff(65535)+1-1562 = 63,974
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 015E 
; 0000 015F TIFR1 = 0;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0160 #asm("sei");
;PCODE: $0000022F VOL: 0
; 0000 0161 }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;void Ult_Sonic(void)
; 0000 0164 {
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0165 int i;
; 0000 0166 
; 0000 0167 for (i = 8; i < 13; i++)
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;	i -> R16,R17
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0168 {
; 0000 0169 if ((buf[i] < 0x15) && (0x09 < buf[i]) && (buf[i] != 0x00))
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 016A {
; 0000 016B control = Emergency;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 016C break;
;PCODE: $00000254 VOL: 0
; 0000 016D }
; 0000 016E }
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 016F }
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;void Stop_Setting(void)
; 0000 0172 {
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0173 PORTH = 0x00;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0174 DDRH = 0x40;  // 후방 LED
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0175 PORTH = 0x00; // 후방 LED OFF
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0176 DDRL = 0x10;  // 부저
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0177 PORTL = 0x00; // 부저 OFF
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0178 delay_ms(20);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0179 }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;void Emergency_Act(void)
; 0000 017C {
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 017D 
; 0000 017E Serial_Send0(control); // test
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 017F 
; 0000 0180 find_line = OutOfLine;
;PCODE: $00000273 VOL: 0
; 0000 0181 
; 0000 0182 Motor_dir(S);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0183 Stop_Setting();
;PCODE: $00000277 VOL: 0
; 0000 0184 
; 0000 0185 RIGHT = 0;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0186 LEFT = 0; // 전진
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0187 PORTH = PORTH | 0x40;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0188 PORTL = PORTL | 0x10;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0189 
; 0000 018A delay_ms(1000);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 018B 
; 0000 018C PORTH = PORTH & (~0x40); // 후방 LED OFF
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 018D PORTL = PORTL & (~0x10); // 부저 OFF
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 018E 
; 0000 018F Motor_dir(T);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0190 Initial_Motor_Setting();
;PCODE: $0000028D VOL: 0
; 0000 0191 
; 0000 0192 while (find_line != Found_Line)
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0193 {
; 0000 0194 unsigned char IR = PINC;
; 0000 0195 
; 0000 0196 switch (find_line) // 1.라인벗어나기 2. 라인찾기
;PCODE: $00000292 VOL: 0
;	IR -> Y+0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0197 {
; 0000 0198 case OutOfLine:
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0199 if (IR == 0b11111111)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 019A find_line = Turn;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 019B /*fall through*/
; 0000 019C case Turn:
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 019D RIGHT = Velocity_Detect;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 019E LEFT = Velocity_Detect;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 019F if (find_line == OutOfLine)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01A0 break;
;PCODE: $000002AA VOL: 0
; 0000 01A1 /*fall through*/
; 0000 01A2 case GetInLine:
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01A3 if (IR == 0b11100111)
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01A4 {
; 0000 01A5 find_line = Found_Line;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01A6 RIGHT = 0;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 01A7 LEFT = 0;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01A8 Motor_dir(S);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01A9 }
; 0000 01AA break;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01AB default:
;PCODE: $000002C0 VOL: 0
; 0000 01AC break;
;PCODE: $000002C1 VOL: 0
; 0000 01AD }
;PCODE: $000002C2 VOL: 0
; 0000 01AE }
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01AF }
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;void main(void)
; 0000 01B2 {
;PCODE: $000002C8 VOL: 0
; 0000 01B3 
; 0000 01B4 int i;
; 0000 01B5 
; 0000 01B6 Stop_Setting();
;	i -> R16,R17
;PCODE: $000002C9 VOL: 0
; 0000 01B7 
; 0000 01B8 Initial_Motor_Setting();
;PCODE: $000002CA VOL: 0
; 0000 01B9 Init_USART();
;PCODE: $000002CB VOL: 0
; 0000 01BA 
; 0000 01BB Set_Interrupt();
;PCODE: $000002CC VOL: 0
; 0000 01BC 
; 0000 01BD // 전후방 기본 초음파 측정 요청
; 0000 01BE for (i = 0; i < 5; i++)
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01BF {
; 0000 01C0 Serial_Send1(Tx_buf1[i]);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01C1 }
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01C2 
; 0000 01C3 delay_ms(500);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 01C4 
; 0000 01C5 while (control != THE_END)
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01C6 {
; 0000 01C7 Ult_Sonic();
;PCODE: $000002E5 VOL: 0
; 0000 01C8 Serial_Send0(control); // test
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01C9 
; 0000 01CA switch (control)
;PCODE: $000002E8 VOL: 0
; 0000 01CB {
; 0000 01CC case Emergency:
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01CD Emergency_Act();
;PCODE: $000002EC VOL: 0
; 0000 01CE control = linetracing;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01CF break;
;PCODE: $000002EF VOL: 0
; 0000 01D0 case linetracing:
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01D1 Linetracer();
;PCODE: $000002F4 VOL: 0
; 0000 01D2 break;
;PCODE: $000002F5 VOL: 0
; 0000 01D3 }
;PCODE: $000002F6 VOL: 0
; 0000 01D4 }
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01D5 delay_ms(3000);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01D6 PORTL = 0x00;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01D7 PORTH = 0x00;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 01D8 PORTB = 0x00;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01D9 }
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
